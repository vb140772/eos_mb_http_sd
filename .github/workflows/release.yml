name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build Binary
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.version
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: linux-amd64
          - os: linux
            arch: arm64
            suffix: linux-arm64
          - os: darwin
            arch: amd64
            suffix: darwin-amd64
          - os: windows
            arch: amd64
            suffix: windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.6
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w" -o eos_mb_http_sd-${{ matrix.suffix }} main.go
          echo "Binary built: eos_mb_http_sd-${{ matrix.suffix }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.suffix }}
          path: eos_mb_http_sd-${{ matrix.suffix }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.version
    permissions:
      contents: write
      packages: read
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          echo "Version to release: ${{ steps.get_version.outputs.version }}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        run: |
          echo "Creating release for version: ${{ steps.get_version.outputs.version }}"
          gh release create ${{ steps.get_version.outputs.version }} --title "Release ${{ steps.get_version.outputs.version }}" --notes "Release ${{ steps.get_version.outputs.version }}" --draft=false --prerelease=false

      - name: Upload Release Assets
        run: |
          echo "Uploading assets to release: ${{ steps.get_version.outputs.version }}"
          for suffix in linux-amd64 linux-arm64 darwin-amd64 windows-amd64.exe; do
            if [ -f "artifacts/$suffix/eos_mb_http_sd-$suffix" ]; then
              echo "Uploading $suffix asset..."
              gh release upload ${{ steps.get_version.outputs.version }} artifacts/$suffix/eos_mb_http_sd-$suffix
            fi
          done
