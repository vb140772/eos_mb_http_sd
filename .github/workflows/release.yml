name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  BINARY_NAME: eos_mb_http_sd
  GO_VERSION: '1.24.6'

jobs:
  build:
    name: Build Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: linux-amd64
          - os: linux
            arch: arm64
            suffix: linux-arm64
          - os: darwin
            arch: amd64
            suffix: darwin-amd64
          - os: darwin
            arch: arm64
            suffix: darwin-arm64
          - os: windows
            arch: amd64
            suffix: windows-amd64.exe
          - os: windows
            arch: arm64
            suffix: windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w" -o ${{ env.BINARY_NAME }}-${{ matrix.suffix }} main.go
          echo "Binary built: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}"

      - name: Create checksums
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            sha256sum ${{ env.BINARY_NAME }}-${{ matrix.suffix }} > ${{ env.BINARY_NAME }}-${{ matrix.suffix }}.sha256
          else
            shasum -a 256 ${{ env.BINARY_NAME }}-${{ matrix.suffix }} > ${{ env.BINARY_NAME }}-${{ matrix.suffix }}.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.suffix }}
          path: |
            ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
            ${{ env.BINARY_NAME }}-${{ matrix.suffix }}.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.version
    permissions:
      contents: write
      packages: read
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          echo "Version to release: ${{ steps.get_version.outputs.version }}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          echo "Available artifacts:"
          find artifacts -type f -exec ls -la {} \;

      - name: Verify GitHub CLI Authentication
        run: |
          echo "Verifying GitHub CLI authentication..."
          echo "Repository: ${{ github.repository }}"
          echo "GH_TOKEN length: ${#GH_TOKEN}"
          
          # Test GitHub CLI authentication
          gh auth status || exit 1
          
          # Test repository access
          gh repo view ${{ github.repository }} || exit 1

      - name: Create Release
        id: create_release
        run: |
          echo "Creating release for version: ${{ steps.get_version.outputs.version }}"
          echo "Repository: ${{ github.repository }}"
          echo "GH_TOKEN is set: $([ -n "$GH_TOKEN" ] && echo "YES" || echo "NO")"
          echo "Current directory: $(pwd)"
          echo "Git status:"
          git status --porcelain || echo "Git status check failed"
          
          # Check if release already exists
          if gh release view ${{ steps.get_version.outputs.version }} >/dev/null 2>&1; then
            echo "Release ${{ steps.get_version.outputs.version }} already exists, skipping creation"
            echo "existing=true" >> $GITHUB_OUTPUT
          else
            echo "Creating new release ${{ steps.get_version.outputs.version }}"
            echo "existing=false" >> $GITHUB_OUTPUT
            
            # Create a new release
            echo "Executing: gh release create ${{ steps.get_version.outputs.version }} --title 'Release ${{ steps.get_version.outputs.version }}' --notes 'Release ${{ steps.get_version.outputs.version }} of ${{ env.BINARY_NAME }}' --draft=false --prerelease=false"
            
            gh release create ${{ steps.get_version.outputs.version }} \
              --title "Release ${{ steps.get_version.outputs.version }}" \
              --notes "Release ${{ steps.get_version.outputs.version }} of ${{ env.BINARY_NAME }}" \
              --draft=false \
              --prerelease=false || exit 1
          fi

      - name: Upload Release Assets
        run: |
          echo "Uploading assets to release: ${{ steps.get_version.outputs.version }}"
          
          # Upload all binaries to the release
          for suffix in linux-amd64 linux-arm64 darwin-amd64 darwin-arm64 windows-amd64 windows-arm64; do
            if [ -d "artifacts/$suffix" ]; then
              echo "Uploading $suffix assets..."
              gh release upload ${{ steps.get_version.outputs.version }} \
                artifacts/$suffix/${{ env.BINARY_NAME }}-$suffix \
                artifacts/$suffix/${{ env.BINARY_NAME }}-$suffix.sha256 || exit 1
            else
              echo "Warning: artifacts/$suffix directory not found"
            fi
          done

      - name: Create and Upload Checksums
        run: |
          echo "Creating combined checksums file..."
          
          # Create a combined checksums file
          echo "## Checksums" > checksums.txt
          echo "" >> checksums.txt
          for file in artifacts/*/*.sha256; do
            if [ -f "$file" ]; then
              cat "$file" >> checksums.txt
            fi
          done
          
          echo "Checksums file content:"
          cat checksums.txt
          
          # Upload checksums file
          echo "Uploading checksums.txt to release..."
          gh release upload ${{ steps.get_version.outputs.version }} checksums.txt || exit 1
