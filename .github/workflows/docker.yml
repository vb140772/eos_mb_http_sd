name: Build and Publish Docker Images

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (e.g., v1.0.0)'
        required: false
        default: 'latest'
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: false
        default: true
        type: boolean
      push_to_packages:
        description: 'Push to GitHub Packages'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            tag: amd64
          - platform: linux/arm64
            tag: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && inputs.push_to_registry != false }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GitHub Packages
        if: ${{ github.event_name != 'pull_request' && inputs.push_to_packages != false }}
        uses: docker/login-action@v3
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            docker.pkg.github.com/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Debug metadata outputs
        run: |
          echo "Debug: meta.outputs.tags = '${{ steps.meta.outputs.tags }}'"
          echo "Debug: meta.outputs.labels = '${{ steps.meta.outputs.labels }}'"
          echo "Debug: meta.outputs.json = '${{ steps.meta.outputs.json }}'"

      - name: Add custom version tag if provided
        id: custom_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.version }}" ]; then
            echo "custom_tag=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "Custom version tag: ${{ inputs.version }}"
          else
            echo "custom_tag=" >> $GITHUB_OUTPUT
            echo "No custom version tag provided"
          fi
          
          echo "Debug: custom_tag output = '${{ steps.custom_tag.outputs.custom_tag }}'"
          echo "Debug: github.event_name = '${{ github.event_name }}'"
          echo "Debug: inputs.version = '${{ inputs.version }}'"

      - name: Build and push Docker image to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && inputs.push_to_registry != false }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push custom version tag (if provided)
        if: ${{ github.event_name != 'pull_request' && inputs.push_to_registry != false && steps.custom_tag.outputs.custom_tag != '' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.custom_tag.outputs.custom_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push Docker image to GitHub Packages
        if: ${{ github.event_name != 'pull_request' && inputs.push_to_packages != false }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: docker.pkg.github.com/${{ env.IMAGE_NAME }}/eos-mb-http-sd:${{ matrix.tag }}-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push custom version tag to GitHub Packages (if provided)
        if: ${{ github.event_name != 'pull_request' && inputs.push_to_packages != false && steps.custom_tag.outputs.custom_tag != '' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: docker.pkg.github.com/${{ env.IMAGE_NAME }}/eos-mb-http-sd:${{ steps.custom_tag.outputs.custom_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build multi-platform image (for releases)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push custom version multi-platform image (if provided)
        if: ${{ startsWith(github.ref, 'refs/tags/') && steps.custom_tag.outputs.custom_tag != '' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.custom_tag.outputs.custom_tag }}
            docker.pkg.github.com/${{ env.IMAGE_NAME }}/eos-mb-http-sd:${{ steps.custom_tag.outputs.custom_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: ${{ always() && github.event_name != 'pull_request' }}
    steps:
      - name: Notify on Success
        run: |
          if [ "${{ needs.build-and-push.result }}" = "success" ] && [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "‚úÖ All jobs completed successfully!"
            echo "üöÄ Docker images published to:"
            echo "   - GitHub Container Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            echo "   - GitHub Packages: docker.pkg.github.com/${{ env.IMAGE_NAME }}/eos-mb-http-sd"
            
            if [ -n "${{ steps.custom_tag.outputs.custom_tag }}" ]; then
              echo "   - Custom version tag: ${{ steps.custom_tag.outputs.custom_tag }}"
            fi
          else
            echo "‚ùå Some jobs failed:"
            echo "   - Build and Push: ${{ needs.build-and-push.result }}"
            echo "   - Security Scan: ${{ needs.security-scan.result }}"
            exit 1
          fi
