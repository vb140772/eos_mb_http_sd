name: Test Docker Image

on:
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-docker:
    name: Test Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            tag: amd64
          - platform: linux/arm64
            tag: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test Docker image
        run: |
          echo "Testing Docker image..."
          
          # Start the container
          docker run -d --name test-container \
            -p 8080:8080 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.tag }}
          
          # Wait for container to start
          sleep 10
          
          # Check if container is running
          if docker ps | grep test-container; then
            echo "✅ Container is running"
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi
          
          # Test health endpoint (if available)
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "⚠️  Health check failed or endpoint not available"
          fi
          
          # Clean up
          docker stop test-container
          docker rm test-container

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.tag }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload hadolint results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'hadolint-results.sarif'
